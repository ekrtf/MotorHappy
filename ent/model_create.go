// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/ekrtf/MotorHappy/ent/model"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// ModelCreate is the builder for creating a Model entity.
type ModelCreate struct {
	config
	mutation *ModelMutation
	hooks    []Hook
}

// SetName sets the name field.
func (mc *ModelCreate) SetName(s string) *ModelCreate {
	mc.mutation.SetName(s)
	return mc
}

// SetNillableName sets the name field if the given value is not nil.
func (mc *ModelCreate) SetNillableName(s *string) *ModelCreate {
	if s != nil {
		mc.SetName(*s)
	}
	return mc
}

// Save creates the Model in the database.
func (mc *ModelCreate) Save(ctx context.Context) (*Model, error) {
	if _, ok := mc.mutation.Name(); !ok {
		v := model.DefaultName
		mc.mutation.SetName(v)
	}
	var (
		err  error
		node *Model
	)
	if len(mc.hooks) == 0 {
		node, err = mc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ModelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mc.mutation = mutation
			node, err = mc.sqlSave(ctx)
			return node, err
		})
		for i := len(mc.hooks) - 1; i >= 0; i-- {
			mut = mc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mc *ModelCreate) SaveX(ctx context.Context) *Model {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (mc *ModelCreate) sqlSave(ctx context.Context) (*Model, error) {
	var (
		m     = &Model{config: mc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: model.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: model.FieldID,
			},
		}
	)
	if value, ok := mc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: model.FieldName,
		})
		m.Name = value
	}
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	m.ID = int(id)
	return m, nil
}
